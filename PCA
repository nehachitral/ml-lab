import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from sklearn.preprocessing import StandardScaler
import sys
import os

def pca_from_path(file_path, k=2, label_column=None):
    if not os.path.exists(file_path):
        print(f"File not found: {file_path}")
        return
    
    # Load dataset
    df = pd.read_csv(file_path)

    # Optional: separate labels
    if label_column and label_column in df.columns:
        y = df[label_column].values
        X = df.drop(columns=[label_column]).values
    else:
        y = None
        X = df.values

    # Standardize features
    scaler = StandardScaler()
    X_std = scaler.fit_transform(X)

    # Covariance matrix
    cov_matrix = np.cov(X_std.T)

    # Eigen decomposition
    eigen_values, eigen_vectors = np.linalg.eig(cov_matrix)

    # Sort by eigenvalues in descending order
    sorted_idx = np.argsort(eigen_values)[::-1]
    eigen_vectors = eigen_vectors[:, sorted_idx]
    eigen_values = eigen_values[sorted_idx]

    # Project data
    W = eigen_vectors[:, :k]
    X_pca = X_std.dot(W)

    # Display results
    print(f"Original shape: {X.shape}")
    print(f"Reduced shape: {X_pca.shape}")

    # Plot only if reduced to 2D
    if k == 2:
        plt.figure(figsize=(8, 6))
        if y is not None:
            for label in np.unique(y):
                plt.scatter(X_pca[y == label, 0], X_pca[y == label, 1], label=str(label))
            plt.legend()
        else:
            plt.scatter(X_pca[:, 0], X_pca[:, 1])
        plt.title('PCA Result (2D Projection)')
        plt.xlabel('Principal Component 1')
        plt.ylabel('Principal Component 2')
        plt.grid(True)
        plt.show()
    
    return X_pca

# Example usage
if __name__ == "__main__":
    file_path = input("Enter path to CSV dataset: ")
    label_column = input("Enter label column name (or press Enter if none): ").strip()
    label_column = label_column if label_column else None
    k = input("Enter number of dimensions to reduce to (default=2): ").strip()
    k = int(k) if k else 2

    pca_from_path(file_path, k, label_column)
